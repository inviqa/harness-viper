command('app build'):
  env:
    COMPOSE_PROJECT_NAME: = @('namespace')
  exec: |
    #!bash(workspace:/)|@
    ws external-images pull
    passthru docker-compose build node

command('app publish'):
  env:
    COMPOSE_PROJECT_NAME: = @('namespace')
  exec: |
    #!bash(workspace:/)|@
    echo "@('docker.registry.password')" | run docker login --username="@('docker.registry.username')" --password-stdin @('docker.registry.url')
    run docker-compose push @('pipeline.publish.services')
    run docker logout @('docker.registry.url')

command('app publish chart <release> <message>'):
  env:
    SSH_PRIVATE_KEY: = @('pipeline.publish.chart.git.ssh_private_key')
    REPOSITORY: = @('pipeline.publish.chart.git.repository')
    ARTIFACTS_PATH:  = "./build-artifacts-repository/" ~ @('pipeline.publish.chart.git.path') ~ "/" ~ input.argument('release')
    MESSAGE:    = input.argument('message')
    USER_EMAIL: = @('pipeline.publish.chart.git.email')
  exec: |
    #!bash(workspace:/)|@
    
    run rm -rf build-artifacts-repository
    echo "${SSH_PRIVATE_KEY}" | base64 -d > id_rsa
    chmod 0600 id_rsa

    export GIT_SSH_COMMAND='ssh -i ./id_rsa -o "IdentitiesOnly yes" -F /dev/null -o StrictHostKeyChecking=no'
    
    run git clone $REPOSITORY ./build-artifacts-repository
    run git -C ./build-artifacts-repository config user.email "${USER_EMAIL}"

    run mkdir -p $ARTIFACTS_PATH
    run rsync --exclude='*.twig' --exclude='_twig' --delete -a .my127ws/helm/app/ ${ARTIFACTS_PATH}/
    
    export GIT_SSH_COMMAND='ssh -i ../id_rsa -o "IdentitiesOnly yes" -F /dev/null -o StrictHostKeyChecking=no'
    run git -C ./build-artifacts-repository add .
    run git -C ./build-artifacts-repository commit --allow-empty -m \"${MESSAGE}\"
    run git -C ./build-artifacts-repository push origin master


command('helm template <chart-path>'):
  env:
    CHART_PATH:  = input.argument('chart-path')
    NAMESPACE:   = @('pipeline.' ~ input.argument('environment') ~ '.namespace')
  exec: |
    #!bash(harness:/helm)|=
    set -o pipefail
    cd "${CHART_PATH}"
    if helm version --short --client | grep '^Client: v2' >/dev/null 2>&1; then
      passthru helm init --client-only
    fi
    passthru helm dependency build
    passthru helm template .

command('helm kubeval <chart-path>'):
  env:
    CHART_PATH: = input.argument('chart-path')
    K8S_VERSION: = @('helm.kubernetes_version')
    NAMESPACE: = @('pipeline.' ~ input.argument('environment') ~ '.namespace')
    ADDITIONAL_SCHEMA_LOCATIONS: = @('helm.additional_schema_locations')
  exec: |
    #!bash(harness:/helm)|=
    set -o pipefail
    cd "${CHART_PATH}"
    if helm version --short --client | grep '^Client: v2' >/dev/null 2>&1; then
      passthru helm init --client-only
    fi
    passthru helm dependency build
    
    if readlink "${HELM_HOME:-$HOME}/.helm/plugins/helm-kubeval" | grep '/https-github.com-instrumenta-helm-kubeval$' >/dev/null; then
      passthru helm plugin remove kubeval
    fi
    passthru helm plugin install https://github.com/inviqa/helm-kubeval || true
    KUBEVAL_OPTS=(
      --kube-version "${K8S_VERSION}"
      --kubernetes-version "${K8S_VERSION}"
      --schema-location https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master
    )
    if [ -n "${ADDITIONAL_SCHEMA_LOCATIONS:-}" ]; then
      KUBEVAL_OPTS+=(--additional-schema-locations "${ADDITIONAL_SCHEMA_LOCATIONS}")
    fi
    passthru helm kubeval "${KUBEVAL_OPTS[@]}" .
