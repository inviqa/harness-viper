
command('enable'):
  env:
    SYNC_STRATEGY:        = @('docker-compose.sync.strategy')
    APP_DEVELOPMENT:      = @('app.development')
    APP_DYNAMIC:          = @('app.dynamic')
    NAMESPACE:            = @('namespace')
    COMPOSE_PROJECT_NAME: = @('namespace')
  exec: |
    #!bash(workspace:/)
    source .my127ws/harness/scripts/enable.sh

command('disable'):
  env:
    SYNC_STRATEGY:        = @('docker-compose.sync.strategy')
    NAMESPACE:            = @('namespace')
    COMPOSE_PROJECT_NAME: = @('namespace')
  exec: |
    #!bash(workspace:/)
    source .my127ws/harness/scripts/disable.sh

command('destroy'):
  env:
    NAMESPACE:            = @('namespace')
    APP_DEVELOPMENT:      = @('app.development')
    APP_DYNAMIC:          = @('app.dynamic')
    APP_VERSION:          = @('app.version')
    DOCKER_REPOSITORY:    = @('docker.repository')
    SYNC_STRATEGY:        = @('docker-compose.sync.strategy')
    COMPOSE_PROJECT_NAME: = @('namespace')
  exec: |
    #!bash(workspace:/)|@
    source .my127ws/harness/scripts/destroy.sh

command('networks external'):
  env:
    NETWORKS: = get_docker_external_networks()
  exec: |
    #!bash(workspace:/)
    for NETWORK in ${NETWORKS}; do
      if ! docker network inspect "${NETWORK}" >/dev/null 2>&1; then
        passthru docker network create "${NETWORK}"
      fi
    done

command('yarn %'):
  env:
    COMPOSE_PROJECT_NAME: = @('namespace')
  exec: |
    #!bash(workspace:/)|=
    if [ -t 0 ] && [ -t 1 ] ; then
      docker-compose exec -u node node yarn ={ input.argument('%') }
    else
      docker-compose exec -T -u node node yarn ={ input.argument('%') }
    fi

command('exec %'):
  env:
    COMPOSE_PROJECT_NAME: = @('namespace')
  exec: |
    #!bash(workspace:/)|=
    if [ -t 0 ] && [ -t 1 ] ; then
      docker-compose exec -u node node ={ input.argument('%') }
    else
      docker-compose exec -T -u node node ={ input.argument('%') }
    fi

command('console'):
  env:
    COMPOSE_PROJECT_NAME: = @('namespace')
  exec: |
    #!bash(workspace:/)|@
    passthru docker-compose exec -u node node bash

command('logs %'):
  env:
    COMPOSE_PROJECT_NAME: = @('namespace')
  exec: |
    #!bash(harness:/)|=
    docker-compose logs ={input.argument('%')}

command('ps'):
  env:
    COMPOSE_PROJECT_NAME: = @('namespace')
  exec: |
    #!bash(workspace:/)|@
    docker-compose ps

command('port <service>'):
  env:
    COMPOSE_PROJECT_NAME: = @('namespace')
  exec: |
    #!bash(workspace:/)|=
    passthru docker port $(docker-compose ps -q ={input.argument('service')})

command('set <attribute> <value>'):
  env:
    ATTR_KEY: = input.argument('attribute')
    ATTR_VAL: = input.argument('value')
  exec: |
    #!bash(workspace:/)|=
    if [ ! -f workspace.override.yml ]; then
      touch workspace.override.yml
    fi
    if grep -q "attribute('${ATTR_KEY}'):" workspace.override.yml; then
      echo "Removing old '${ATTR_KEY}' setting from workspace.override.yml"
      sed "/^attribute('${ATTR_KEY}'): .*$/d" workspace.override.yml > workspace.override.yml.tmp && mv workspace.override.yml.tmp workspace.override.yml
    fi
    if grep -q "attribute('${ATTR_KEY}'):" workspace.override.yml; then
      echo 'Could not remove line from workspace.override.yml, failing'
      exit 1
    fi
    echo "Setting '${ATTR_KEY}' setting to '${ATTR_VAL}' in workspace.override.yml"
    echo "attribute('${ATTR_KEY}'): ${ATTR_VAL}" >> workspace.override.yml
